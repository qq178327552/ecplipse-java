package _a18_设计模式._a11_享元结构型设计模式;
/**
 * 享元模式
 * 	存在许多完全相同或相似的对象,可以使用享元模式节约内存
 * 	以共享方式,高效支持大量细粒度对象重用
 * 	
 * 	享元工厂:用于构建具体对象的工厂,并且存放在享元池中
 * 	内部状态:可以共享,不会随环境变化而改变
 * 	外部状态:不可共享,会随环境变化而改变,使用单独类来处理并传入享元工厂
 * 	享元类接口:提供对工厂调度的接口方法
 * 	享元实现类:通过内部变量来存储和处理内部状态,实现享元类的处理过程
 * 	
 * @author zheng
 *
 */
public class Main {
	public static void main(String[] args) {
		/*从享元工厂中获取汽车对象*/
		FlyWeight_ICar car = FlyWeightFactory_Car.getCar("奔驰");
		/*执行方法时只需要传入外部对象*/
		car.run(new WhereRun("江苏"));
		
	}
}
/*
应用场景:
*/