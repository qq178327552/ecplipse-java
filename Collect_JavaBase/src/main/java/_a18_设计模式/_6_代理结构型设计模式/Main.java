package _a18_设计模式._6_代理结构型设计模式;
/**
 * 代理设计模式
 * 	通过代理,控制对对象的访问
 * 	可以控制访问某个对象的方法,在调用该方法前做前置处理,调用方法后做后置处理
 * 	安全代理,屏蔽对真实角色的直接访问
 * 	远程代理,通过代理类处理远程调用方法
 * 	延时加载,同加载轻量级代理对象,真正需要时再加载真实对象
 * 	
 * 	抽象角色:供调用者调用,定义代理角色和真实角色的公共对外方法
 * 	真实角色:定义真实所要实现的业务逻辑
 * 	代理角色:将统一的流程控制放在代理角色中处理,通过真实角色的业务逻辑方法来实现抽象方法
 * @author zheng
 *
 */
public class Main {
}
/*
应用场景:
*/